% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_driver_coefs.R
\name{get_driver_coefs}
\alias{get_driver_coefs}
\title{get_driver_coefs}
\usage{
get_driver_coefs(fit = NULL, type = NULL, print = FALSE)
}
\arguments{
\item{fit}{The name of the lm or glm fit object from which to pull the values.
Required.}

\item{type}{The function will attempt to determine the fit type from the
fit object but it is also possible to specify the model type by using a
character string of either \"lm\" or \"glm\".  Optional.}

\item{print}{A logical indicating if the results are to be printed to the screen.
The function will return a tibble, which can be printed to the console, but the
number of rows will be truncated.  The print option defaults to printing all
rows in the dataframe.  Default: FALSE}
}
\value{
A tibble object with the coefficients summarized in tabular format.
}
\description{
Pull key driver coefficients from a fit object using \code{broom::tidy}
and creates an tibble that can be exported or used in further analysis.  Will
pull similar but slightly different values if the fit is either an lm or glm
object.  If an lm object from regression, will pull six columns: term (coefficient
name), estimate (regression coefficient), p.value (coefficient p value), rsq
(overall model adjusted r-squared), p.mod (overall model F test), and dir_prob
(direction problem flag where 1 indicated direction problem, 0 indicates no
direction problem).  For dir_pro, variables must end with either \"_HI\" or
\"_LO\" suffix and will assume that HI should be positive and LO should be
negative.  If a glm object is detected,nine columns are pulled:  term
(coefficient name), estimate (glm estimate), or (Odds Ratio calculated from
the estimate), prob (probability calculated from the Odds Ration), p.value
(coefficient p value), rsq (overall simulated model adjusted r-squared, based
on SSE and calculated by the \code{rsq} package), p.mod (overall model F test
based on /code{ResourceSelection::hoslem.test}, dir_prob(direction problem flag,
identical to meaning from lm object), and plus_10 (simulation of the change in
probability of being in the target group if 10\% is added to each predictor,
one at a time, holding all other values constant or at the mean, regardless
if it's numerically possible to add 10\% or not).
}
\examples{
\dontrun{
if(interactive()){
 fit1 <- lm(qmod::mod1, formula=nps~.)
 get_driver_coefs(fit1)

 mod2 <- qmod::mod1 \%>\%
   mutate(nps = dplyr::case_when(nps==100 ~ 1,
                                 nps <100 ~ 0))

 fit2 <- glm(data=mod2 , formula=nps~., family="binomial")
 get_driver_coefs(fit2)
 }
}
}
